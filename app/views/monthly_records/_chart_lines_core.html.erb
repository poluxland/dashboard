<div class="card mb-3">
  <div class="card-body">
    <h2 class="h5 mb-3">Evolución DP / ACTP / ASTP / IAP</h2>
    <div style="height:340px"><canvas id="coreParamsChart"></canvas></div>
  </div>
</div>
<%= javascript_tag nonce: true do %>
  let _coreParamsChartInstance = null;

  function renderCoreParamsChart() {
    if (!window.Chart) return;
    const el = document.getElementById("coreParamsChart");
    if (!el) return;

    if (_coreParamsChartInstance) { _coreParamsChartInstance.destroy(); }

    const labels   = <%= raw(@core_labels.to_json) %>;
    const datasets = <%= raw(@core_datasets.to_json) %>.map(ds => ({
      label: ds.label,
      data: ds.data,
      borderWidth: 2,
      tension: 0.25,
      fill: false,
      pointRadius: 2
    }));

    // Mapa por clave normalizada: quitar espacios y a minúsculas
    const colorMap = {
      dp:   "#2563eb", // azul
      actp: "#16a34a", // verde
      astp: "#f59e0b", // ámbar
      iap:  "#ef4444"  // rojo
    };

    // Paleta fallback por si algún label no coincide
    const palette = ["#2563eb","#16a34a","#f59e0b","#ef4444","#8b5cf6","#10b981","#e11d48","#0ea5e9"];

    datasets.forEach((d, i) => {
      const key = d.label.replace(/\s+/g, "").toLowerCase(); // "Dp" -> "dp"
      const c = colorMap[key] || palette[i % palette.length];
      d.borderColor = c;
      d.backgroundColor = c;
    });

    _coreParamsChartInstance = new Chart(el, {
      type: "line",
      data: { labels, datasets },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: { mode: "nearest", axis: "x", intersect: false },
        plugins: { legend: { position: "bottom" }, tooltip: { mode: "index", intersect: false } },
        scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
      }
    });
  }

  document.addEventListener("DOMContentLoaded", renderCoreParamsChart);
  document.addEventListener("turbo:load", renderCoreParamsChart);
<% end %>
