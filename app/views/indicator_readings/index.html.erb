<div class="d-flex align-items-center justify-content-between mb-3">
  <h1 class="h3 mb-0">Lecturas</h1>
  <div class="d-flex gap-2">
    <%= link_to "Planilla", matrix_indicator_readings_path, class: "btn btn-outline-primary" %>
    <%= link_to "Nueva lectura", new_indicator_reading_path, class: "btn btn-primary" %>
  </div>
</div>

<div class="card mb-3">
  <div class="card-body">
    <%= form_with url: indicator_readings_path, method: :get, local: true, class: "row g-2" do %>
      <div class="col-auto">
        <label class="form-label mb-0">Persona</label>
        <%= select_tag :person_id, options_from_collection_for_select(@people, :id, :name, params[:person_id]),
                       include_blank: "Todas", class: "form-select" %>
      </div>
      <div class="col-auto">
        <label class="form-label mb-0">Mes</label>
        <%= month_field_tag :month, params[:month], class: "form-control" %>
      </div>
      <div class="col-auto align-self-end">
        <%= submit_tag "Filtrar", class: "btn btn-outline-secondary" %>
      </div>
    <% end %>
  </div>
</div>

<div class="table-responsive">
  <table class="table table-sm table-striped align-middle">
    <thead class="table-light">
  <tr>
    
    <th>Persona</th>
    <th>Mes</th>
    <th>Planta</th>
    <th class="text-end">Cuasi %</th>
    <th class="text-end">LVS %</th>
    <th class="text-end">CC %</th>
    <th class="text-end">HH %</th>
    <th class="text-end">Promedio %</th> <!-- NUEVA -->
    <th></th>
  </tr>
</thead>
<tbody>
  <% @readings.each do |r| %>
    <tr>
     
      <td><%= r.person.name %></td>
      <td><%= I18n.l(r.period, format: "%B %Y").capitalize  %></td>
      <td><%= r.person.planta %></td>
      <td class="text-end"><%= number_with_precision(r.cuasi, precision: 0) %></td>
      <td class="text-end"><%= number_with_precision(r.lvs, precision: 0) %></td>
      <td class="text-end"><%= number_with_precision(r.cc, precision: 0) %></td>
      <td class="text-end"><%= number_with_precision(r.hh, precision: 0) %></td>
      <td class="text-end"><%= number_with_precision(r.avg_pct, precision: 0) %></td> <!-- NUEVA -->
      <td class="text-nowrap">
        <%= link_to "Editar", edit_indicator_reading_path(r), class: "btn btn-sm btn-outline-primary" %>
      </td>
    </tr>
  <% end %>
</tbody>

  </table>
</div>

<!-- ===== Gráficos ===== -->
<div class="row g-3 mt-2">
  <div class="col-12">
    <div class="card h-100">
      <div class="card-body">
        <h2 class="h6 mb-3">Tendencia mensual (promedio por indicador)</h2>
        <div style="height:340px"><canvas id="trendChart"></canvas></div>
      </div>
    </div>
  </div>
  <div class="col-12">
  <div class="card h-100">
    <div class="card-body">
      <h2 class="h6 mb-3">Evolución del promedio por persona</h2>
      <div style="height:340px"><canvas id="avgPeopleTrendChart"></canvas></div>
    </div>
  </div>
</div>

<div class="col-12">
  <div class="card h-100">
    <div class="card-body">
      <h2 class="h6 mb-3">
        Comparativa por planta
        <% if @month.present? %>— <%= I18n.l(@month, format: "%B %Y").capitalize %><% end %>
      </h2>
      <div style="height:380px"><canvas id="plantsCompareChart"></canvas></div>
    </div>
  </div>
</div>



  <% if @month.present? %>
    <div class="col-12">
      <div class="card h-100">
        <div class="card-body">
          <h2 class="h6 mb-3">Comparativa por persona — <%= @month.strftime("%Y-%m") %></h2>
          <div style="height:380px"><canvas id="barsChart"></canvas></div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<!-- Cargar Chart.js (si no lo cargas en el layout) -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js" crossorigin="anonymous"></script>

<%= javascript_tag nonce: true do %>
  let _trendChart, _avgPeopleTrend, _barsChart, _plantsChart;

  function ensureChartJsLoaded(cb){
    if (window.Chart) return cb();
    const s = document.createElement("script");
    s.src = "https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js";
    s.crossOrigin = "anonymous";
    s.onload = cb;
    document.head.appendChild(s);
  }

  function renderIndicatorCharts(){
    ensureChartJsLoaded(function(){
      // Paleta consistente por indicador
      const colorMap = {
        "Cuasi": "#2563eb",
        "LVS":   "#16a34a",
        "CC":    "#f59e0b",
        "HH":    "#ef4444"
      };

      // Paleta por serie de persona
      const palette = (i) => {
        const base = ["#2563eb","#16a34a","#f59e0b","#ef4444","#8b5cf6","#0ea5e9","#22c55e","#fb7185","#a3e635","#f472b6","#14b8a6","#f97316"];
        return base[i % base.length];
      };

      // ===== 1) Tendencia mensual (promedio por indicador) =====
      const trendEl = document.getElementById("trendChart");
      if (trendEl) {
        if (_trendChart) _trendChart.destroy();

        const labelsTrend   = <%= raw((@trend_labels || []).to_json) %>;
        const datasetsTrend = <%= raw((@trend_datasets || []).to_json) %>.map(ds => {
          const c = colorMap[ds.label] || "#64748b";
          return { label: ds.label, data: ds.data, borderColor: c, backgroundColor: c, borderWidth: 2, pointRadius: 2, tension: 0.25, fill: false };
        });

        if (labelsTrend.length && datasetsTrend.length) {
          _trendChart = new Chart(trendEl, {
            type: "line",
            data: { labels: labelsTrend, datasets: datasetsTrend },
            options: {
              responsive: true, maintainAspectRatio: false,
              plugins: { legend: { position: "bottom" }, tooltip: { mode: "index", intersect: false } },
              interaction: { mode: "nearest", axis: "x", intersect: false },
              scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
            }
          });
        }
      }

      // ===== 2) Evolución del PROMEDIO por persona =====
      const avgEl = document.getElementById("avgPeopleTrendChart");
      if (avgEl) {
        if (_avgPeopleTrend) _avgPeopleTrend.destroy();

        const labelsAvg   = <%= raw((@avg_people_labels || []).to_json) %>;
        const datasetsAvg = <%= raw((@avg_people_datasets || []).to_json) %>.map((ds, i) => {
          const c = palette(i);
          return { label: ds.label, data: ds.data, borderColor: c, backgroundColor: c, borderWidth: 2, pointRadius: 1.5, tension: 0.2, spanGaps: true, fill: false };
        });

        if (labelsAvg.length && datasetsAvg.length) {
          _avgPeopleTrend = new Chart(avgEl, {
            type: "line",
            data: { labels: labelsAvg, datasets: datasetsAvg },
            options: {
              responsive: true, maintainAspectRatio: false,
              plugins: { legend: { position: "bottom" }, tooltip: { mode: "index", intersect: false } },
              interaction: { mode: "nearest", axis: "x", intersect: false },
              scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
            }
          });
        }
      }

      // ===== 3) Barras por persona (solo si hay mes) =====
      const barsEl = document.getElementById("barsChart");
      <% if @month.present? %>
      if (barsEl) {
        if (_barsChart) _barsChart.destroy();

        const labelsBars   = <%= raw((@bar_labels || []).to_json) %>;
        const datasetsBars = <%= raw((@bar_datasets || []).to_json) %>.map(ds => {
          const c = colorMap[ds.label] || "#64748b";
          return { label: ds.label, data: ds.data, borderColor: c, backgroundColor: c, borderWidth: 1 };
        });

        if (labelsBars.length && datasetsBars.length) {
          _barsChart = new Chart(barsEl, {
            type: "bar",
            data: { labels: labelsBars, datasets: datasetsBars },
            options: {
              responsive: true, maintainAspectRatio: false,
              plugins: { legend: { position: "bottom" }, tooltip: { mode: "index", intersect: false } },
              interaction: { mode: "index", intersect: false },
              scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
            }
          });
        }
      }
      <% end %>

      // ===== 4) Barras comparando PLANTAS =====
      const plantsEl = document.getElementById("plantsCompareChart");
      if (plantsEl) {
        if (_plantsChart) _plantsChart.destroy();

        const labelsPlants   = <%= raw((@plants_labels || []).to_json) %>;
        const datasetsPlants = <%= raw((@plants_datasets || []).to_json) %>.map(ds => {
          const c = colorMap[ds.label] || "#64748b";
          return { label: ds.label, data: ds.data, borderColor: c, backgroundColor: c, borderWidth: 1 };
        });

        if (labelsPlants.length && datasetsPlants.length) {
          _plantsChart = new Chart(plantsEl, {
            type: "bar",
            data: { labels: labelsPlants, datasets: datasetsPlants },
            options: {
              responsive: true, maintainAspectRatio: false,
              plugins: {
                legend: { position: "bottom" },
                tooltip: {
                  mode: "index", intersect: false,
                  callbacks: {
                    label: (ctx) => {
                      const v = ctx.parsed.y ?? 0;
                      return `${ctx.dataset.label}: ${Math.round(v)}%`;
                    }
                  }
                }
              },
              interaction: { mode: "index", intersect: false },
              // Para apilar por planta, descomenta:
              // scales: { x: { stacked: true }, y: { stacked: true, beginAtZero: true, ticks: { precision: 0, callback: v => `${v}%` } } }
              scales: { y: { beginAtZero: true, ticks: { precision: 0, callback: v => `${v}%` } } }
            }
          });
        }
      }
    }); // ensureChartJsLoaded
  } // renderIndicatorCharts

  document.addEventListener("turbo:load", renderIndicatorCharts);
  document.addEventListener("DOMContentLoaded", renderIndicatorCharts);
<% end %>
